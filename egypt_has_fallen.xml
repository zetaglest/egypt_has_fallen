<?xml version="1.0" standalone="yes" ?>
<scenario>
--Egypt has fallen
--A MegaGlest ( https://github.com/MegaGlest ) network scenario
--Stay alive long enough for your Egyptian ally to reinforce your armies!
--By Andy Alt and James Sherratt
--https://github.com/zetaglest/egypt_has_fallen
--CC-BY-SA
<difficulty value="5"/>
<players>
	<player control="cpu-mega" faction="egypt" team="1"/>
	<player control="human" faction="persian" team="1"/>
	<player control="network" faction="indian" team="1"/>
	<player control="network" faction="norsemen" team="1"/>
	<player control="cpu-mega" faction="magic" team="2"/>
	<player control="cpu-mega" faction="magic" resource_multiplier="3.0" team="2"/>
	<player control="cpu-mega" faction="magic" team="2"/>
	<player control="cpu-mega" faction="magic" resource_multiplier="3.0"team="2"/>
</players>
<map value="grandezza"/>
<tileset value="autumn"/>
<tech-tree value="megapack"/>
	<default-resources value="true"/>
	<default-units value="false"/>
	<default-victory-conditions value="false"/>
	<fog-of-war value="true"/>

	<scripts>
		<global>

			--game constants. Only change them if you change the order or factions above
			egypt = 0
			persian = 1
			native_american = 2
			norsemen = 3

			--other variables. Best to leave them unchanged as well ;)
			--These are used in unitCreated and unitDied sections below
			slaveCount = 0
			pyramidCount = 0
			mageTowerCount = 0

			battlemage_loop = 0
			dragon_loop = 0
			daemon_loop = 0
			timesLooped = 0

			make_golem_count = 0
			summoner_count = 0

			initPyramid = 1
			firstPyramidBuilt = 0
		</global>
		<startup>

			--Team 1 units

			--Main buildings for Team 1
			createUnit('palace', persian, startLocation(persian))
			createUnit('main_teepee', native_american, startLocation(native_american))
			createUnit('castle', norsemen, startLocation(norsemen))

			--create workers
			for playerNum=persian, native_american do
				for i=1, 4 do
					createUnit('worker', playerNum, startLocation(playerNum))
				end
			end

			humanPlayers = 0
			for i=0, 3 do
				strName = getPlayerName(i)
				--print(strName)
				if strName ~= 'Network' and not string.find(strName, 'AI') and strName ~= '???' then
					--print(strName)
					humanPlayers = humanPlayers + 1
				end
			end

			for i=1, 4 do
				createUnit('thrall', norsemen, startLocation(norsemen))
			end
			createUnit('cow', norsemen, startLocation(norsemen))

			for i=0,1 do
				createUnit( 'sheep', persian, startLocation(persian) )
			end

			-- Native American starting units
			for _, unit in ipairs({'stickfighter', 'stickfighter', 'axe_thrower', 'axe_thrower', 'axe_thrower'}) do
				createUnit(unit, native_american, startLocation (native_american))
			end

			-- Persian starting units
			for i=0,2 do
				createUnit('fakir', persian, startLocation (persian))
			end
			for i=0,2 do
				createUnit('princess', persian, startLocation (persian))
			end


			for i=0,1 do
				createUnit('spearman', norsemen, startLocation (norsemen))
			end
			for i=0,2 do
				createUnit('archer', norsemen, startLocation (norsemen))
			end

			--create AI units (Team 2, Magic)
			for playerNum=4, 7 do
				for _, unit in ipairs({'mage_tower', 'energy_source', 'energy_source', 'battlemage', 'battlemage', 'daemon', 'daemon', 'golem', 'summoner_guild'}) do
					createUnit(unit, playerNum, startLocation(playerNum))
				end

				for j=1, 5 do
					createUnit('initiate', playerNum, startLocation(playerNum))
				end
			--create nearby Egypt enemies
				for _, unit in ipairs({'spearthrower', 'scarab', 'mummy', 'mummy'}) do
					createUnit( unit, egypt, startLocation(playerNum))
				end
			end

			--Egypt units
			for i=0,1 do
				createUnit( 'farm', egypt, {startLocation(egypt)[1]+20, startLocation(egypt)[2]+30} )
				createUnit( 'chicken', egypt, {startLocation(egypt)[1]+20, startLocation(egypt)[2]+30} )
			end
			createUnit('slave', egypt, {startLocation(egypt)[1], startLocation(egypt)[2]+30})
			giveProductionCommand(lastCreatedUnit(), 'pyramid')

			--The starting pyramid is located near the enemy's  base
			--It's needed to store resources long enough for Egypt to start
			--building a new base
			createUnit('pyramid', egypt, startLocation(5))
			--print(startingPyramidID)

-- Give players extra resources depending on how many human players
-- are connected
			for _, player in ipairs({persian, norsemen, native_american, egypt}) do
				for __, res in ipairs({'gold', 'stone', 'wood'}) do
					giveResource(res, player, 800/humanPlayers)
					print('giving res')
				end
			end

			-- Give some extra res to Egypt to help build their first pyramid
			for _, res in ipairs({'gold', 'stone', 'wood'}) do
				giveResource(res, egypt, 400)
			end

			togglePauseGame(1)
			for _, intro in ipairs({'Intro1', 'Intro2','Intro3','Intro4','Intro5'}) do
				showMessage ( intro, 'Introduction' )
			end
		</startup>

		<unitCreated>
			if lastCreatedUnitName() == 'slave' then
				slaveCount = slaveCount + 1
			end

			if lastCreatedUnitName() == 'pyramid' then
				pyramidCount = pyramidCount + 1
				--print('pyramids:')
				-- print(pyramidCount)
				if pyramidCount == 1 and firstPyramidBuilt == 0 then
					if initPyramid == 0 then
						for _, res in ipairs({'gold', 'stone', 'wood'}) do
							print(res)
							giveResource(res, egypt, 1000)
						end
						firstPyramidBuilt = 1
					else
						initPyramid = 0
					end
				end
			end

			if lastCreatedUnitName() == 'mage_tower' then
				mageTowerCount = mageTowerCount + 1
			end

			if lastCreatedUnitName() == 'summoner' then
				summoner_count = summoner_count + 1
			end

			if lastCreatedUnitName() == 'daemon' and summoner_count > 0 then
				daemon_loop = daemon_loop + 1
				if daemon_loop == 6 then
					for AIplayer = 4, 7 do
						for diff=1,humanPlayers * 2 do
							createUnit ('battlemage', AIplayer, startLocation(AIplayer) )
							givePositionCommand( lastCreatedUnit(), 'attack', {startLocation(egypt)[1]+10,startLocation(egypt)[2]-10} )
						end
					end
					daemon_loop = 0
				end
			end

			if lastCreatedUnitName() == 'battlemage' then
				battlemage_loop = battlemage_loop + 1
				if battlemage_loop == 5 then
					if timesLooped > 1 then
						make_golem_count = make_golem_count + 1
						for AIplayer = 4, 7 do
							createUnit ('tower_of_souls', AIplayer, startLocation(AIplayer) )
							createUnit (make_golem_count % 5 ~= 0 and 'power_golem' or 'archmage', AIplayer, startLocation (AIplayer) )
							if dragon_loop == 14 then
								for diff=1,humanPlayers * 2 do
									createUnit ('evil_dragon', AIplayer, startLocation (AIplayer) )
								end
							end
						end
						dragon_loop = (dragon_loop + 1) % 15
					end
					battlemage_loop = 0
					timesLooped = timesLooped + 1
				end
			end
		</unitCreated>

		<unitDied>
			if lastDeadUnitName() == 'slave' then
				slaveCount = slaveCount - 1
			end

			if lastDeadUnitName() == 'pyramid' then
				pyramidCount = pyramidCount - 1
			end

			if ( slaveCount == 0 and pyramidCount == 0 ) then
				for _, failMsg in ipairs({'failure1', 'failure2', 'failure3'}) do
					showMessage (failMsg, 'Failure')
				end
				--wait (15)
				for i = 4, 7 do
					setPlayerAsWinner(i)
				end
				endGame()
			end

			if lastDeadUnitName() == 'mage_tower' then
				--print (lastDeadUnitName())
				mageTowerCount = mageTowerCount - 1
				if mageTowerCount == 0 then
					for _, vicMsg in ipairs({'victory1', 'victory2', 'victory3', 'victory4', 'victory5'}) do
						showMessage (vicMsg, 'Victory')
					end
					--wait (15)

					for i = 0, 3 do
						setPlayerAsWinner(i)
					end
					endGame()
				end
			end

		</unitDied>
	</scripts>
</scenario>
